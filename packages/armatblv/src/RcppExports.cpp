// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// rcpparma_hello_world
arma::mat rcpparma_hello_world();
RcppExport SEXP _armatblv_rcpparma_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpparma_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_outerproduct
arma::mat rcpparma_outerproduct(const arma::colvec& x);
RcppExport SEXP _armatblv_rcpparma_outerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_outerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_innerproduct
double rcpparma_innerproduct(const arma::colvec& x);
RcppExport SEXP _armatblv_rcpparma_innerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_innerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_bothproducts
Rcpp::List rcpparma_bothproducts(const arma::colvec& x);
RcppExport SEXP _armatblv_rcpparma_bothproducts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_bothproducts(x));
    return rcpp_result_gen;
END_RCPP
}
// LSE
double LSE(arma::vec x);
RcppExport SEXP _armatblv_LSE(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(LSE(x));
    return rcpp_result_gen;
END_RCPP
}
// expand_vec
arma::mat expand_vec(arma::vec x, int n);
RcppExport SEXP _armatblv_expand_vec(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(expand_vec(x, n));
    return rcpp_result_gen;
END_RCPP
}
// mc_mlog_like
arma::vec mc_mlog_like(int N, arma::mat x, arma::mat alpha, arma::mat beta, arma::mat kappa, double phi, double sigma, Rcpp::List E_post_sample_list);
RcppExport SEXP _armatblv_mc_mlog_like(SEXP NSEXP, SEXP xSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP kappaSEXP, SEXP phiSEXP, SEXP sigmaSEXP, SEXP E_post_sample_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type E_post_sample_list(E_post_sample_listSEXP);
    rcpp_result_gen = Rcpp::wrap(mc_mlog_like(N, x, alpha, beta, kappa, phi, sigma, E_post_sample_list));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_armatblv_rcpparma_hello_world", (DL_FUNC) &_armatblv_rcpparma_hello_world, 0},
    {"_armatblv_rcpparma_outerproduct", (DL_FUNC) &_armatblv_rcpparma_outerproduct, 1},
    {"_armatblv_rcpparma_innerproduct", (DL_FUNC) &_armatblv_rcpparma_innerproduct, 1},
    {"_armatblv_rcpparma_bothproducts", (DL_FUNC) &_armatblv_rcpparma_bothproducts, 1},
    {"_armatblv_LSE", (DL_FUNC) &_armatblv_LSE, 1},
    {"_armatblv_expand_vec", (DL_FUNC) &_armatblv_expand_vec, 2},
    {"_armatblv_mc_mlog_like", (DL_FUNC) &_armatblv_mc_mlog_like, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_armatblv(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
