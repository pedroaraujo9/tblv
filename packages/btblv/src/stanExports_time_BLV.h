// Generated by rstantools.  Do not edit by hand.

/*
    btblv is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    btblv is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with btblv.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_time_BLV_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 72> locations_array__ =
  {" (found before start of program)",
  " (in 'time_BLV', line 14, column 2 to column 17)",
  " (in 'time_BLV', line 15, column 2 to column 21)",
  " (in 'time_BLV', line 16, column 2 to column 17)",
  " (in 'time_BLV', line 17, column 2 to column 24)",
  " (in 'time_BLV', line 18, column 2 to column 22)",
  " (in 'time_BLV', line 19, column 2 to column 36)",
  " (in 'time_BLV', line 20, column 2 to column 23)",
  " (in 'time_BLV', line 23, column 2 to column 21)",
  " (in 'time_BLV', line 24, column 2 to column 27)",
  " (in 'time_BLV', line 26, column 2 to column 36)",
  " (in 'time_BLV', line 27, column 2 to column 59)",
  " (in 'time_BLV', line 28, column 2 to column 47)",
  " (in 'time_BLV', line 29, column 2 to column 44)",
  " (in 'time_BLV', line 25, column 2 to column 37)",
  " (in 'time_BLV', line 32, column 4 to column 76)",
  " (in 'time_BLV', line 31, column 17 to line 33, column 3)",
  " (in 'time_BLV', line 31, column 2 to line 33, column 3)",
  " (in 'time_BLV', line 36, column 4 to line 37, column 69)",
  " (in 'time_BLV', line 35, column 21 to line 38, column 3)",
  " (in 'time_BLV', line 35, column 2 to line 38, column 3)",
  " (in 'time_BLV', line 41, column 2 to column 23)",
  " (in 'time_BLV', line 42, column 2 to column 28)",
  " (in 'time_BLV', line 43, column 2 to column 33)",
  " (in 'time_BLV', line 45, column 4 to column 32)",
  " (in 'time_BLV', line 46, column 4 to column 28)",
  " (in 'time_BLV', line 44, column 17 to line 47, column 3)",
  " (in 'time_BLV', line 44, column 2 to line 47, column 3)",
  " (in 'time_BLV', line 49, column 4 to column 30)",
  " (in 'time_BLV', line 48, column 16 to line 50, column 3)",
  " (in 'time_BLV', line 48, column 2 to line 50, column 3)",
  " (in 'time_BLV', line 52, column 4 to column 24)",
  " (in 'time_BLV', line 51, column 16 to line 53, column 3)",
  " (in 'time_BLV', line 51, column 2 to line 53, column 3)",
  " (in 'time_BLV', line 54, column 9 to column 10)",
  " (in 'time_BLV', line 54, column 12 to column 13)",
  " (in 'time_BLV', line 54, column 2 to column 62)",
  " (in 'time_BLV', line 56, column 4 to column 48)",
  " (in 'time_BLV', line 55, column 16 to line 57, column 3)",
  " (in 'time_BLV', line 55, column 2 to line 57, column 3)",
  " (in 'time_BLV', line 2, column 2 to column 17)",
  " (in 'time_BLV', line 3, column 2 to column 17)",
  " (in 'time_BLV', line 4, column 2 to column 17)",
  " (in 'time_BLV', line 5, column 2 to column 17)",
  " (in 'time_BLV', line 6, column 27 to column 28)",
  " (in 'time_BLV', line 6, column 30 to column 31)",
  " (in 'time_BLV', line 6, column 2 to column 35)",
  " (in 'time_BLV', line 7, column 2 to column 9)",
  " (in 'time_BLV', line 8, column 17 to column 19)",
  " (in 'time_BLV', line 8, column 2 to column 21)",
  " (in 'time_BLV', line 9, column 17 to column 21)",
  " (in 'time_BLV', line 9, column 2 to column 23)",
  " (in 'time_BLV', line 10, column 20 to column 24)",
  " (in 'time_BLV', line 10, column 2 to column 26)",
  " (in 'time_BLV', line 11, column 15 to column 19)",
  " (in 'time_BLV', line 11, column 2 to column 21)",
  " (in 'time_BLV', line 14, column 9 to column 10)",
  " (in 'time_BLV', line 14, column 12 to column 13)",
  " (in 'time_BLV', line 15, column 9 to column 10)",
  " (in 'time_BLV', line 15, column 12 to column 13)",
  " (in 'time_BLV', line 16, column 9 to column 10)",
  " (in 'time_BLV', line 17, column 9 to column 12)",
  " (in 'time_BLV', line 19, column 28 to column 30)",
  " (in 'time_BLV', line 20, column 9 to column 11)",
  " (in 'time_BLV', line 23, column 9 to column 10)",
  " (in 'time_BLV', line 23, column 12 to column 13)",
  " (in 'time_BLV', line 24, column 9 to column 10)",
  " (in 'time_BLV', line 24, column 12 to column 13)",
  " (in 'time_BLV', line 26, column 9 to column 11)",
  " (in 'time_BLV', line 27, column 9 to column 10)",
  " (in 'time_BLV', line 28, column 9 to column 10)",
  " (in 'time_BLV', line 29, column 18 to column 19)"};
#include <stan_meta_header.hpp>
class model_time_BLV final : public model_base_crtp<model_time_BLV> {
private:
  int n;
  int J;
  int N;
  int K;
  Eigen::Matrix<double,-1,-1> x_data__;
  int Ng;
  std::vector<int> init_index;
  std::vector<int> past_index;
  std::vector<int> current_index;
  std::vector<int> group_id;
  int delta_raw_1dim__;
  Eigen::Map<Eigen::Matrix<double,-1,-1>> x{nullptr, 0, 0};
public:
  ~model_time_BLV() {}
  model_time_BLV(stan::io::var_context& context__, unsigned int
                 random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_time_BLV_namespace::model_time_BLV";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 40;
      context__.validate_dims("data initialization", "n", "int",
        std::vector<size_t>{});
      n = std::numeric_limits<int>::min();
      current_statement__ = 40;
      n = context__.vals_i("n")[(1 - 1)];
      current_statement__ = 40;
      stan::math::check_greater_or_equal(function__, "n", n, 0);
      current_statement__ = 41;
      context__.validate_dims("data initialization", "J", "int",
        std::vector<size_t>{});
      J = std::numeric_limits<int>::min();
      current_statement__ = 41;
      J = context__.vals_i("J")[(1 - 1)];
      current_statement__ = 41;
      stan::math::check_greater_or_equal(function__, "J", J, 0);
      current_statement__ = 42;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 42;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 42;
      stan::math::check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 43;
      context__.validate_dims("data initialization", "K", "int",
        std::vector<size_t>{});
      K = std::numeric_limits<int>::min();
      current_statement__ = 43;
      K = context__.vals_i("K")[(1 - 1)];
      current_statement__ = 43;
      stan::math::check_greater_or_equal(function__, "K", K, 0);
      current_statement__ = 44;
      stan::math::validate_non_negative_index("x", "n", n);
      current_statement__ = 45;
      stan::math::validate_non_negative_index("x", "J", J);
      current_statement__ = 46;
      context__.validate_dims("data initialization", "x", "double",
        std::vector<size_t>{static_cast<size_t>(n), static_cast<size_t>(J)});
      x_data__ = Eigen::Matrix<double,-1,-1>::Constant(n, J,
                   std::numeric_limits<double>::quiet_NaN());
      new (&x) Eigen::Map<Eigen::Matrix<double,-1,-1>>(x_data__.data(), n, J);
      {
        std::vector<local_scalar_t__> x_flat__;
        current_statement__ = 46;
        x_flat__ = context__.vals_r("x");
        current_statement__ = 46;
        pos__ = 1;
        current_statement__ = 46;
        for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
          current_statement__ = 46;
          for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
            current_statement__ = 46;
            stan::model::assign(x, x_flat__[(pos__ - 1)],
              "assigning variable x", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 46;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 46;
      stan::math::check_greater_or_equal(function__, "x", x, 0);
      current_statement__ = 46;
      stan::math::check_less_or_equal(function__, "x", x, 1);
      current_statement__ = 47;
      context__.validate_dims("data initialization", "Ng", "int",
        std::vector<size_t>{});
      Ng = std::numeric_limits<int>::min();
      current_statement__ = 47;
      Ng = context__.vals_i("Ng")[(1 - 1)];
      current_statement__ = 48;
      stan::math::validate_non_negative_index("init_index", "Ng", Ng);
      current_statement__ = 49;
      context__.validate_dims("data initialization", "init_index", "int",
        std::vector<size_t>{static_cast<size_t>(Ng)});
      init_index = std::vector<int>(Ng, std::numeric_limits<int>::min());
      current_statement__ = 49;
      init_index = context__.vals_i("init_index");
      current_statement__ = 50;
      stan::math::validate_non_negative_index("past_index", "n - Ng", (n -
        Ng));
      current_statement__ = 51;
      context__.validate_dims("data initialization", "past_index", "int",
        std::vector<size_t>{static_cast<size_t>((n - Ng))});
      past_index = std::vector<int>((n - Ng),
                     std::numeric_limits<int>::min());
      current_statement__ = 51;
      past_index = context__.vals_i("past_index");
      current_statement__ = 52;
      stan::math::validate_non_negative_index("current_index", "n - Ng", (n -
        Ng));
      current_statement__ = 53;
      context__.validate_dims("data initialization", "current_index", "int",
        std::vector<size_t>{static_cast<size_t>((n - Ng))});
      current_index = std::vector<int>((n - Ng),
                        std::numeric_limits<int>::min());
      current_statement__ = 53;
      current_index = context__.vals_i("current_index");
      current_statement__ = 54;
      stan::math::validate_non_negative_index("group_id", "n - Ng", (n - Ng));
      current_statement__ = 55;
      context__.validate_dims("data initialization", "group_id", "int",
        std::vector<size_t>{static_cast<size_t>((n - Ng))});
      group_id = std::vector<int>((n - Ng), std::numeric_limits<int>::min());
      current_statement__ = 55;
      group_id = context__.vals_i("group_id");
      current_statement__ = 56;
      stan::math::validate_non_negative_index("E", "n", n);
      current_statement__ = 57;
      stan::math::validate_non_negative_index("E", "K", K);
      current_statement__ = 58;
      stan::math::validate_non_negative_index("alpha", "J", J);
      current_statement__ = 59;
      stan::math::validate_non_negative_index("alpha", "K", K);
      current_statement__ = 60;
      stan::math::validate_non_negative_index("beta", "J", J);
      current_statement__ = 61;
      delta_raw_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 61;
      delta_raw_1dim__ = (J - 1);
      current_statement__ = 61;
      stan::math::validate_non_negative_index("delta_raw", "J - 1",
        delta_raw_1dim__);
      current_statement__ = 62;
      stan::math::validate_non_negative_index("phi", "Ng", Ng);
      current_statement__ = 63;
      stan::math::validate_non_negative_index("log_sigma", "Ng", Ng);
      current_statement__ = 64;
      stan::math::validate_non_negative_index("theta", "n", n);
      current_statement__ = 65;
      stan::math::validate_non_negative_index("theta", "K", K);
      current_statement__ = 66;
      stan::math::validate_non_negative_index("beta_expand", "n", n);
      current_statement__ = 67;
      stan::math::validate_non_negative_index("beta_expand", "J", J);
      current_statement__ = 68;
      stan::math::validate_non_negative_index("sigma", "Ng", Ng);
      current_statement__ = 69;
      stan::math::validate_non_negative_index("delta", "J", J);
      current_statement__ = 70;
      stan::math::validate_non_negative_index("log_kappa", "J", J);
      current_statement__ = 71;
      stan::math::validate_non_negative_index("kappa", "J", J);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = (n * K) + (J * K) + J + delta_raw_1dim__ + 1 + Ng + Ng;
  }
  inline std::string model_name() const final {
    return "model_time_BLV";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_time_BLV_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,-1> E =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(n, K, DUMMY_VAR__);
      current_statement__ = 1;
      E = in__.template read<Eigen::Matrix<local_scalar_t__,-1,-1>>(n, K);
      Eigen::Matrix<local_scalar_t__,-1,-1> alpha =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(J, K, DUMMY_VAR__);
      current_statement__ = 2;
      alpha = in__.template read<Eigen::Matrix<local_scalar_t__,-1,-1>>(J, K);
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__);
      current_statement__ = 3;
      beta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(J);
      Eigen::Matrix<local_scalar_t__,-1,1> delta_raw =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(delta_raw_1dim__,
          DUMMY_VAR__);
      current_statement__ = 4;
      delta_raw = in__.template read<
                    Eigen::Matrix<local_scalar_t__,-1,1>>(delta_raw_1dim__);
      local_scalar_t__ baseline_delta = DUMMY_VAR__;
      current_statement__ = 5;
      baseline_delta = in__.template read<local_scalar_t__>();
      Eigen::Matrix<local_scalar_t__,-1,1> phi =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(Ng, DUMMY_VAR__);
      current_statement__ = 6;
      phi = in__.template read_constrain_lub<
              Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(-1, 1, lp__,
              Ng);
      Eigen::Matrix<local_scalar_t__,-1,1> log_sigma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(Ng, DUMMY_VAR__);
      current_statement__ = 7;
      log_sigma = in__.template read<
                    Eigen::Matrix<local_scalar_t__,-1,1>>(Ng);
      Eigen::Matrix<local_scalar_t__,-1,-1> theta =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(n, K, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,-1> beta_expand =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(n, J, DUMMY_VAR__);
      current_statement__ = 14;
      stan::model::assign(beta_expand,
        stan::math::transpose(stan::math::rep_matrix(beta, n)),
        "assigning variable beta_expand");
      Eigen::Matrix<local_scalar_t__,-1,1> sigma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(Ng, DUMMY_VAR__);
      current_statement__ = 10;
      stan::model::assign(sigma, stan::math::exp(log_sigma),
        "assigning variable sigma");
      Eigen::Matrix<local_scalar_t__,-1,1> delta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__);
      current_statement__ = 11;
      stan::model::assign(delta,
        stan::math::append_row(delta_raw, -stan::math::sum(delta_raw)),
        "assigning variable delta");
      Eigen::Matrix<local_scalar_t__,-1,1> log_kappa =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__);
      current_statement__ = 12;
      stan::model::assign(log_kappa, stan::math::add(baseline_delta, delta),
        "assigning variable log_kappa");
      Eigen::Matrix<local_scalar_t__,-1,1> kappa =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__);
      current_statement__ = 13;
      stan::model::assign(kappa, stan::math::exp(log_kappa),
        "assigning variable kappa");
      current_statement__ = 17;
      for (int i = 1; i <= Ng; ++i) {
        current_statement__ = 15;
        stan::model::assign(theta,
          stan::math::multiply(
            (stan::model::rvalue(sigma, "sigma", stan::model::index_uni(i)) /
            stan::math::sqrt((1 -
              stan::math::pow(
                stan::model::rvalue(phi, "phi", stan::model::index_uni(i)), 2)))),
            stan::model::rvalue(E, "E",
              stan::model::index_uni(
                stan::model::rvalue(init_index, "init_index",
                  stan::model::index_uni(i))))), "assigning variable theta",
          stan::model::index_uni(
            stan::model::rvalue(init_index, "init_index",
              stan::model::index_uni(i))));
      }
      current_statement__ = 20;
      for (int i = 1; i <= (n - Ng); ++i) {
        current_statement__ = 18;
        stan::model::assign(theta,
          stan::math::add(
            stan::math::multiply(
              stan::model::rvalue(phi, "phi",
                stan::model::index_uni(
                  stan::model::rvalue(group_id, "group_id",
                    stan::model::index_uni(i)))),
              stan::model::deep_copy(
                stan::model::rvalue(theta, "theta",
                  stan::model::index_uni(
                    stan::model::rvalue(past_index, "past_index",
                      stan::model::index_uni(i)))))),
            stan::math::multiply(
              stan::model::rvalue(sigma, "sigma",
                stan::model::index_uni(
                  stan::model::rvalue(group_id, "group_id",
                    stan::model::index_uni(i)))),
              stan::model::rvalue(E, "E",
                stan::model::index_uni(
                  stan::model::rvalue(current_index, "current_index",
                    stan::model::index_uni(i)))))),
          "assigning variable theta",
          stan::model::index_uni(
            stan::model::rvalue(current_index, "current_index",
              stan::model::index_uni(i))));
      }
      current_statement__ = 13;
      stan::math::check_greater_or_equal(function__, "kappa", kappa, 0);
      {
        current_statement__ = 21;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(beta, 0, 10));
        current_statement__ = 22;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(delta_raw, 0, 10));
        current_statement__ = 23;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(baseline_delta, 0,
                         10));
        current_statement__ = 27;
        for (int i = 1; i <= Ng; ++i) {
          current_statement__ = 24;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(log_sigma, "log_sigma",
                             stan::model::index_uni(i)), 0, 1));
          current_statement__ = 25;
          lp_accum__.add(stan::math::uniform_lpdf<propto__>(
                           stan::model::rvalue(phi, "phi",
                             stan::model::index_uni(i)), -1, 1));
        }
        current_statement__ = 30;
        for (int k = 1; k <= K; ++k) {
          current_statement__ = 28;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(alpha, "alpha",
                             stan::model::index_omni(),
                             stan::model::index_uni(k)), 0, 1));
        }
        current_statement__ = 33;
        for (int i = 1; i <= n; ++i) {
          current_statement__ = 31;
          lp_accum__.add(stan::math::std_normal_lpdf<propto__>(
                           stan::model::rvalue(E, "E",
                             stan::model::index_uni(i))));
        }
        current_statement__ = 34;
        stan::math::validate_non_negative_index("mu", "n", n);
        current_statement__ = 35;
        stan::math::validate_non_negative_index("mu", "J", J);
        Eigen::Matrix<local_scalar_t__,-1,-1> mu =
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(n, J, DUMMY_VAR__);
        current_statement__ = 36;
        stan::model::assign(mu,
          stan::math::inv_logit(
            stan::math::add(beta_expand,
              stan::math::multiply(theta, stan::math::transpose(alpha)))),
          "assigning variable mu");
        current_statement__ = 39;
        for (int j = 1; j <= J; ++j) {
          current_statement__ = 37;
          lp_accum__.add(stan::math::beta_proportion_lpdf<propto__>(
                           stan::model::rvalue(x, "x",
                             stan::model::index_omni(),
                             stan::model::index_uni(j)),
                           stan::model::rvalue(mu, "mu",
                             stan::model::index_omni(),
                             stan::model::index_uni(j)),
                           stan::model::rvalue(kappa, "kappa",
                             stan::model::index_uni(j))));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_time_BLV_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,-1> E =
        Eigen::Matrix<double,-1,-1>::Constant(n, K,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      E = in__.template read<Eigen::Matrix<local_scalar_t__,-1,-1>>(n, K);
      Eigen::Matrix<double,-1,-1> alpha =
        Eigen::Matrix<double,-1,-1>::Constant(J, K,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      alpha = in__.template read<Eigen::Matrix<local_scalar_t__,-1,-1>>(J, K);
      Eigen::Matrix<double,-1,1> beta =
        Eigen::Matrix<double,-1,1>::Constant(J,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      beta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(J);
      Eigen::Matrix<double,-1,1> delta_raw =
        Eigen::Matrix<double,-1,1>::Constant(delta_raw_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      delta_raw = in__.template read<
                    Eigen::Matrix<local_scalar_t__,-1,1>>(delta_raw_1dim__);
      double baseline_delta = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 5;
      baseline_delta = in__.template read<local_scalar_t__>();
      Eigen::Matrix<double,-1,1> phi =
        Eigen::Matrix<double,-1,1>::Constant(Ng,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 6;
      phi = in__.template read_constrain_lub<
              Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(-1, 1, lp__,
              Ng);
      Eigen::Matrix<double,-1,1> log_sigma =
        Eigen::Matrix<double,-1,1>::Constant(Ng,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 7;
      log_sigma = in__.template read<
                    Eigen::Matrix<local_scalar_t__,-1,1>>(Ng);
      Eigen::Matrix<double,-1,-1> theta =
        Eigen::Matrix<double,-1,-1>::Constant(n, K,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> beta_expand =
        Eigen::Matrix<double,-1,-1>::Constant(n, J,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> sigma =
        Eigen::Matrix<double,-1,1>::Constant(Ng,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> delta =
        Eigen::Matrix<double,-1,1>::Constant(J,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> log_kappa =
        Eigen::Matrix<double,-1,1>::Constant(J,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> kappa =
        Eigen::Matrix<double,-1,1>::Constant(J,
          std::numeric_limits<double>::quiet_NaN());
      out__.write(E);
      out__.write(alpha);
      out__.write(beta);
      out__.write(delta_raw);
      out__.write(baseline_delta);
      out__.write(phi);
      out__.write(log_sigma);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 14;
      stan::model::assign(beta_expand,
        stan::math::transpose(stan::math::rep_matrix(beta, n)),
        "assigning variable beta_expand");
      current_statement__ = 10;
      stan::model::assign(sigma, stan::math::exp(log_sigma),
        "assigning variable sigma");
      current_statement__ = 11;
      stan::model::assign(delta,
        stan::math::append_row(delta_raw, -stan::math::sum(delta_raw)),
        "assigning variable delta");
      current_statement__ = 12;
      stan::model::assign(log_kappa, stan::math::add(baseline_delta, delta),
        "assigning variable log_kappa");
      current_statement__ = 13;
      stan::model::assign(kappa, stan::math::exp(log_kappa),
        "assigning variable kappa");
      current_statement__ = 17;
      for (int i = 1; i <= Ng; ++i) {
        current_statement__ = 15;
        stan::model::assign(theta,
          stan::math::multiply(
            (stan::model::rvalue(sigma, "sigma", stan::model::index_uni(i)) /
            stan::math::sqrt((1 -
              stan::math::pow(
                stan::model::rvalue(phi, "phi", stan::model::index_uni(i)), 2)))),
            stan::model::rvalue(E, "E",
              stan::model::index_uni(
                stan::model::rvalue(init_index, "init_index",
                  stan::model::index_uni(i))))), "assigning variable theta",
          stan::model::index_uni(
            stan::model::rvalue(init_index, "init_index",
              stan::model::index_uni(i))));
      }
      current_statement__ = 20;
      for (int i = 1; i <= (n - Ng); ++i) {
        current_statement__ = 18;
        stan::model::assign(theta,
          stan::math::add(
            stan::math::multiply(
              stan::model::rvalue(phi, "phi",
                stan::model::index_uni(
                  stan::model::rvalue(group_id, "group_id",
                    stan::model::index_uni(i)))),
              stan::model::deep_copy(
                stan::model::rvalue(theta, "theta",
                  stan::model::index_uni(
                    stan::model::rvalue(past_index, "past_index",
                      stan::model::index_uni(i)))))),
            stan::math::multiply(
              stan::model::rvalue(sigma, "sigma",
                stan::model::index_uni(
                  stan::model::rvalue(group_id, "group_id",
                    stan::model::index_uni(i)))),
              stan::model::rvalue(E, "E",
                stan::model::index_uni(
                  stan::model::rvalue(current_index, "current_index",
                    stan::model::index_uni(i)))))),
          "assigning variable theta",
          stan::model::index_uni(
            stan::model::rvalue(current_index, "current_index",
              stan::model::index_uni(i))));
      }
      current_statement__ = 13;
      stan::math::check_greater_or_equal(function__, "kappa", kappa, 0);
      if (emit_transformed_parameters__) {
        out__.write(theta);
        out__.write(beta_expand);
        out__.write(sigma);
        out__.write(delta);
        out__.write(log_kappa);
        out__.write(kappa);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,-1> E =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(n, K, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(E,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,-1>>(n, K),
        "assigning variable E");
      out__.write(E);
      Eigen::Matrix<local_scalar_t__,-1,-1> alpha =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(J, K, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(alpha,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,-1>>(J, K),
        "assigning variable alpha");
      out__.write(alpha);
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(beta,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(J),
        "assigning variable beta");
      out__.write(beta);
      Eigen::Matrix<local_scalar_t__,-1,1> delta_raw =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(delta_raw_1dim__,
          DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(delta_raw,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(delta_raw_1dim__),
        "assigning variable delta_raw");
      out__.write(delta_raw);
      local_scalar_t__ baseline_delta = DUMMY_VAR__;
      current_statement__ = 5;
      baseline_delta = in__.read<local_scalar_t__>();
      out__.write(baseline_delta);
      Eigen::Matrix<local_scalar_t__,-1,1> phi =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(Ng, DUMMY_VAR__);
      current_statement__ = 6;
      stan::model::assign(phi,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(Ng),
        "assigning variable phi");
      out__.write_free_lub(-1, 1, phi);
      Eigen::Matrix<local_scalar_t__,-1,1> log_sigma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(Ng, DUMMY_VAR__);
      current_statement__ = 7;
      stan::model::assign(log_sigma,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(Ng),
        "assigning variable log_sigma");
      out__.write(log_sigma);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "E", "double",
        std::vector<size_t>{static_cast<size_t>(n), static_cast<size_t>(K)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "alpha", "double",
        std::vector<size_t>{static_cast<size_t>(J), static_cast<size_t>(K)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "beta", "double",
        std::vector<size_t>{static_cast<size_t>(J)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "delta_raw",
        "double", std::vector<size_t>{static_cast<size_t>(delta_raw_1dim__)});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "baseline_delta",
        "double", std::vector<size_t>{});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "phi", "double",
        std::vector<size_t>{static_cast<size_t>(Ng)});
      current_statement__ = 7;
      context__.validate_dims("parameter initialization", "log_sigma",
        "double", std::vector<size_t>{static_cast<size_t>(Ng)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,-1> E =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(n, K, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> E_flat__;
        current_statement__ = 1;
        E_flat__ = context__.vals_r("E");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 1;
          for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
            current_statement__ = 1;
            stan::model::assign(E, E_flat__[(pos__ - 1)],
              "assigning variable E", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 1;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(E);
      Eigen::Matrix<local_scalar_t__,-1,-1> alpha =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(J, K, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> alpha_flat__;
        current_statement__ = 2;
        alpha_flat__ = context__.vals_r("alpha");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 2;
          for (int sym2__ = 1; sym2__ <= J; ++sym2__) {
            current_statement__ = 2;
            stan::model::assign(alpha, alpha_flat__[(pos__ - 1)],
              "assigning variable alpha", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 2;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(alpha);
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> beta_flat__;
        current_statement__ = 3;
        beta_flat__ = context__.vals_r("beta");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
          current_statement__ = 3;
          stan::model::assign(beta, beta_flat__[(pos__ - 1)],
            "assigning variable beta", stan::model::index_uni(sym1__));
          current_statement__ = 3;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(beta);
      Eigen::Matrix<local_scalar_t__,-1,1> delta_raw =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(delta_raw_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> delta_raw_flat__;
        current_statement__ = 4;
        delta_raw_flat__ = context__.vals_r("delta_raw");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= delta_raw_1dim__; ++sym1__) {
          current_statement__ = 4;
          stan::model::assign(delta_raw, delta_raw_flat__[(pos__ - 1)],
            "assigning variable delta_raw", stan::model::index_uni(sym1__));
          current_statement__ = 4;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(delta_raw);
      local_scalar_t__ baseline_delta = DUMMY_VAR__;
      current_statement__ = 5;
      baseline_delta = context__.vals_r("baseline_delta")[(1 - 1)];
      out__.write(baseline_delta);
      Eigen::Matrix<local_scalar_t__,-1,1> phi =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(Ng, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> phi_flat__;
        current_statement__ = 6;
        phi_flat__ = context__.vals_r("phi");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= Ng; ++sym1__) {
          current_statement__ = 6;
          stan::model::assign(phi, phi_flat__[(pos__ - 1)],
            "assigning variable phi", stan::model::index_uni(sym1__));
          current_statement__ = 6;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lub(-1, 1, phi);
      Eigen::Matrix<local_scalar_t__,-1,1> log_sigma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(Ng, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> log_sigma_flat__;
        current_statement__ = 7;
        log_sigma_flat__ = context__.vals_r("log_sigma");
        current_statement__ = 7;
        pos__ = 1;
        current_statement__ = 7;
        for (int sym1__ = 1; sym1__ <= Ng; ++sym1__) {
          current_statement__ = 7;
          stan::model::assign(log_sigma, log_sigma_flat__[(pos__ - 1)],
            "assigning variable log_sigma", stan::model::index_uni(sym1__));
          current_statement__ = 7;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(log_sigma);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"E", "alpha", "beta", "delta_raw",
                "baseline_delta", "phi", "log_sigma"};
    if (emit_transformed_parameters__) {
      std::vector<std::string>
        temp{"theta", "beta_expand", "sigma", "delta", "log_kappa", "kappa"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(n),
                                                 static_cast<size_t>(K)},
                std::vector<size_t>{static_cast<size_t>(J),
                  static_cast<size_t>(K)},
                std::vector<size_t>{static_cast<size_t>(J)},
                std::vector<size_t>{static_cast<size_t>(delta_raw_1dim__)},
                std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(Ng)},
                std::vector<size_t>{static_cast<size_t>(Ng)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(n),
               static_cast<size_t>(K)},
             std::vector<size_t>{static_cast<size_t>(n),
               static_cast<size_t>(J)},
             std::vector<size_t>{static_cast<size_t>(Ng)},
             std::vector<size_t>{static_cast<size_t>(J)},
             std::vector<size_t>{static_cast<size_t>(J)},
             std::vector<size_t>{static_cast<size_t>(J)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
        param_names__.emplace_back(std::string() + "E" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= J; ++sym2__) {
        param_names__.emplace_back(std::string() + "alpha" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= delta_raw_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "delta_raw" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "baseline_delta");
    for (int sym1__ = 1; sym1__ <= Ng; ++sym1__) {
      param_names__.emplace_back(std::string() + "phi" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= Ng; ++sym1__) {
      param_names__.emplace_back(std::string() + "log_sigma" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
          param_names__.emplace_back(std::string() + "theta" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
          param_names__.emplace_back(std::string() + "beta_expand" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= Ng; ++sym1__) {
        param_names__.emplace_back(std::string() + "sigma" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        param_names__.emplace_back(std::string() + "delta" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_kappa" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        param_names__.emplace_back(std::string() + "kappa" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
        param_names__.emplace_back(std::string() + "E" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= J; ++sym2__) {
        param_names__.emplace_back(std::string() + "alpha" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= delta_raw_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "delta_raw" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "baseline_delta");
    for (int sym1__ = 1; sym1__ <= Ng; ++sym1__) {
      param_names__.emplace_back(std::string() + "phi" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= Ng; ++sym1__) {
      param_names__.emplace_back(std::string() + "log_sigma" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
          param_names__.emplace_back(std::string() + "theta" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
          param_names__.emplace_back(std::string() + "beta_expand" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= Ng; ++sym1__) {
        param_names__.emplace_back(std::string() + "sigma" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        param_names__.emplace_back(std::string() + "delta" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_kappa" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        param_names__.emplace_back(std::string() + "kappa" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"E\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(n) + ",\"cols\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(J) + ",\"cols\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"parameters\"},{\"name\":\"delta_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(delta_raw_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"baseline_delta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Ng) + "},\"block\":\"parameters\"},{\"name\":\"log_sigma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Ng) + "},\"block\":\"parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(n) + ",\"cols\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"},{\"name\":\"beta_expand\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(n) + ",\"cols\":" + std::to_string(J) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Ng) + "},\"block\":\"transformed_parameters\"},{\"name\":\"delta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"transformed_parameters\"},{\"name\":\"log_kappa\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"transformed_parameters\"},{\"name\":\"kappa\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"transformed_parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"E\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(n) + ",\"cols\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(J) + ",\"cols\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"parameters\"},{\"name\":\"delta_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(delta_raw_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"baseline_delta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Ng) + "},\"block\":\"parameters\"},{\"name\":\"log_sigma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Ng) + "},\"block\":\"parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(n) + ",\"cols\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"},{\"name\":\"beta_expand\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(n) + ",\"cols\":" + std::to_string(J) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Ng) + "},\"block\":\"transformed_parameters\"},{\"name\":\"delta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"transformed_parameters\"},{\"name\":\"log_kappa\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"transformed_parameters\"},{\"name\":\"kappa\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"transformed_parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((((n * K) + (J * K)) + J) +
      delta_raw_1dim__) + 1) + Ng) + Ng);
    const size_t num_transformed = emit_transformed_parameters * (((((((n *
      K) + (n * J)) + Ng) + J) + J) + J));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((((n * K) + (J * K)) + J) +
      delta_raw_1dim__) + 1) + Ng) + Ng);
    const size_t num_transformed = emit_transformed_parameters * (((((((n *
      K) + (n * J)) + Ng) + J) + J) + J));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_time_BLV_namespace::model_time_BLV;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_time_BLV_namespace::profiles__;
}
#endif
#endif
